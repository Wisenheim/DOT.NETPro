'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="data_amrani")>  _
Partial Public Class _amraDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertARTICLE(instance As ARTICLE)
    End Sub
  Partial Private Sub UpdateARTICLE(instance As ARTICLE)
    End Sub
  Partial Private Sub DeleteARTICLE(instance As ARTICLE)
    End Sub
  Partial Private Sub InsertCATEGORIE(instance As CATEGORIE)
    End Sub
  Partial Private Sub UpdateCATEGORIE(instance As CATEGORIE)
    End Sub
  Partial Private Sub DeleteCATEGORIE(instance As CATEGORIE)
    End Sub
  Partial Private Sub InsertPERSONNEL(instance As PERSONNEL)
    End Sub
  Partial Private Sub UpdatePERSONNEL(instance As PERSONNEL)
    End Sub
  Partial Private Sub DeletePERSONNEL(instance As PERSONNEL)
    End Sub
  Partial Private Sub InsertDETAIL_perso(instance As DETAIL_perso)
    End Sub
  Partial Private Sub UpdateDETAIL_perso(instance As DETAIL_perso)
    End Sub
  Partial Private Sub DeleteDETAIL_perso(instance As DETAIL_perso)
    End Sub
  Partial Private Sub InsertDETAIL(instance As DETAIL)
    End Sub
  Partial Private Sub UpdateDETAIL(instance As DETAIL)
    End Sub
  Partial Private Sub DeleteDETAIL(instance As DETAIL)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.amrani_foundation.My.MySettings.Default.data_amraniConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ARTICLE() As System.Data.Linq.Table(Of ARTICLE)
		Get
			Return Me.GetTable(Of ARTICLE)
		End Get
	End Property
	
	Public ReadOnly Property CATEGORIE() As System.Data.Linq.Table(Of CATEGORIE)
		Get
			Return Me.GetTable(Of CATEGORIE)
		End Get
	End Property
	
	Public ReadOnly Property PERSONNEL() As System.Data.Linq.Table(Of PERSONNEL)
		Get
			Return Me.GetTable(Of PERSONNEL)
		End Get
	End Property
	
	Public ReadOnly Property DETAIL_persos() As System.Data.Linq.Table(Of DETAIL_perso)
		Get
			Return Me.GetTable(Of DETAIL_perso)
		End Get
	End Property
	
	Public ReadOnly Property V_details() As System.Data.Linq.Table(Of V_detail)
		Get
			Return Me.GetTable(Of V_detail)
		End Get
	End Property
	
	Public ReadOnly Property V_Pers() As System.Data.Linq.Table(Of V_Per)
		Get
			Return Me.GetTable(Of V_Per)
		End Get
	End Property
	
	Public ReadOnly Property DETAILs() As System.Data.Linq.Table(Of DETAIL)
		Get
			Return Me.GetTable(Of DETAIL)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTICLE")>  _
Partial Public Class ARTICLE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _REF_ART As Integer
	
	Private _NOM_ART As String
	
	Private _DESIGNATION As String
	
	Private _FOURNISSEUR As String
	
	Private _UNITE As String
	
	Private _PRIX_UNIT As System.Nullable(Of Decimal)
	
	Private _MODE_PAY As String
	
	Private _TVA As System.Nullable(Of Single)
	
	Private _DETAILs As EntitySet(Of DETAIL)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnREF_ARTChanging(value As Integer)
    End Sub
    Partial Private Sub OnREF_ARTChanged()
    End Sub
    Partial Private Sub OnNOM_ARTChanging(value As String)
    End Sub
    Partial Private Sub OnNOM_ARTChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    Partial Private Sub OnFOURNISSEURChanging(value As String)
    End Sub
    Partial Private Sub OnFOURNISSEURChanged()
    End Sub
    Partial Private Sub OnUNITEChanging(value As String)
    End Sub
    Partial Private Sub OnUNITEChanged()
    End Sub
    Partial Private Sub OnPRIX_UNITChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPRIX_UNITChanged()
    End Sub
    Partial Private Sub OnMODE_PAYChanging(value As String)
    End Sub
    Partial Private Sub OnMODE_PAYChanged()
    End Sub
    Partial Private Sub OnTVAChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnTVAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DETAILs = New EntitySet(Of DETAIL)(AddressOf Me.attach_DETAILs, AddressOf Me.detach_DETAILs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REF_ART", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property REF_ART() As Integer
		Get
			Return Me._REF_ART
		End Get
		Set
			If ((Me._REF_ART = value)  _
						= false) Then
				Me.OnREF_ARTChanging(value)
				Me.SendPropertyChanging
				Me._REF_ART = value
				Me.SendPropertyChanged("REF_ART")
				Me.OnREF_ARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_ART", DbType:="NVarChar(50)")>  _
	Public Property NOM_ART() As String
		Get
			Return Me._NOM_ART
		End Get
		Set
			If (String.Equals(Me._NOM_ART, value) = false) Then
				Me.OnNOM_ARTChanging(value)
				Me.SendPropertyChanging
				Me._NOM_ART = value
				Me.SendPropertyChanged("NOM_ART")
				Me.OnNOM_ARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="NVarChar(50)")>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOURNISSEUR", DbType:="NVarChar(50)")>  _
	Public Property FOURNISSEUR() As String
		Get
			Return Me._FOURNISSEUR
		End Get
		Set
			If (String.Equals(Me._FOURNISSEUR, value) = false) Then
				Me.OnFOURNISSEURChanging(value)
				Me.SendPropertyChanging
				Me._FOURNISSEUR = value
				Me.SendPropertyChanged("FOURNISSEUR")
				Me.OnFOURNISSEURChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITE", DbType:="NVarChar(50)")>  _
	Public Property UNITE() As String
		Get
			Return Me._UNITE
		End Get
		Set
			If (String.Equals(Me._UNITE, value) = false) Then
				Me.OnUNITEChanging(value)
				Me.SendPropertyChanging
				Me._UNITE = value
				Me.SendPropertyChanged("UNITE")
				Me.OnUNITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_UNIT", DbType:="Money")>  _
	Public Property PRIX_UNIT() As System.Nullable(Of Decimal)
		Get
			Return Me._PRIX_UNIT
		End Get
		Set
			If (Me._PRIX_UNIT.Equals(value) = false) Then
				Me.OnPRIX_UNITChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_UNIT = value
				Me.SendPropertyChanged("PRIX_UNIT")
				Me.OnPRIX_UNITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODE_PAY", DbType:="NVarChar(50)")>  _
	Public Property MODE_PAY() As String
		Get
			Return Me._MODE_PAY
		End Get
		Set
			If (String.Equals(Me._MODE_PAY, value) = false) Then
				Me.OnMODE_PAYChanging(value)
				Me.SendPropertyChanging
				Me._MODE_PAY = value
				Me.SendPropertyChanged("MODE_PAY")
				Me.OnMODE_PAYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TVA", DbType:="Real")>  _
	Public Property TVA() As System.Nullable(Of Single)
		Get
			Return Me._TVA
		End Get
		Set
			If (Me._TVA.Equals(value) = false) Then
				Me.OnTVAChanging(value)
				Me.SendPropertyChanging
				Me._TVA = value
				Me.SendPropertyChanged("TVA")
				Me.OnTVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTICLE_DETAIL", Storage:="_DETAILs", ThisKey:="REF_ART", OtherKey:="REF_ART")>  _
	Public Property DETAILs() As EntitySet(Of DETAIL)
		Get
			Return Me._DETAILs
		End Get
		Set
			Me._DETAILs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DETAILs(ByVal entity As DETAIL)
		Me.SendPropertyChanging
		entity.ARTICLE = Me
	End Sub
	
	Private Sub detach_DETAILs(ByVal entity As DETAIL)
		Me.SendPropertyChanging
		entity.ARTICLE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATEGORIE")>  _
Partial Public Class CATEGORIE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_CAT As Integer
	
	Private _LIB_CATEG As String
	
	Private _PERSONNEL As EntitySet(Of PERSONNEL)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_CATChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CATChanged()
    End Sub
    Partial Private Sub OnLIB_CATEGChanging(value As String)
    End Sub
    Partial Private Sub OnLIB_CATEGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PERSONNEL = New EntitySet(Of PERSONNEL)(AddressOf Me.attach_PERSONNEL, AddressOf Me.detach_PERSONNEL)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CAT", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_CAT() As Integer
		Get
			Return Me._ID_CAT
		End Get
		Set
			If ((Me._ID_CAT = value)  _
						= false) Then
				Me.OnID_CATChanging(value)
				Me.SendPropertyChanging
				Me._ID_CAT = value
				Me.SendPropertyChanged("ID_CAT")
				Me.OnID_CATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIB_CATEG", DbType:="NVarChar(50)")>  _
	Public Property LIB_CATEG() As String
		Get
			Return Me._LIB_CATEG
		End Get
		Set
			If (String.Equals(Me._LIB_CATEG, value) = false) Then
				Me.OnLIB_CATEGChanging(value)
				Me.SendPropertyChanging
				Me._LIB_CATEG = value
				Me.SendPropertyChanged("LIB_CATEG")
				Me.OnLIB_CATEGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATEGORIE_PERSONNEL", Storage:="_PERSONNEL", ThisKey:="ID_CAT", OtherKey:="ID_CATEG")>  _
	Public Property PERSONNEL() As EntitySet(Of PERSONNEL)
		Get
			Return Me._PERSONNEL
		End Get
		Set
			Me._PERSONNEL.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PERSONNEL(ByVal entity As PERSONNEL)
		Me.SendPropertyChanging
		entity.CATEGORIE = Me
	End Sub
	
	Private Sub detach_PERSONNEL(ByVal entity As PERSONNEL)
		Me.SendPropertyChanging
		entity.CATEGORIE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PERSONNEL")>  _
Partial Public Class PERSONNEL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CIN As String
	
	Private _NOM As String
	
	Private _PRENOM As String
	
	Private _TELEPHONE As String
	
	Private _ADRESSE As String
	
	Private _SALAIRE As System.Nullable(Of Decimal)
	
	Private _MODE_PAY As String
	
	Private _ID_CATEG As System.Nullable(Of Integer)
	
	Private _Code_cheque As String
	
	Private _DETAIL_persos As EntitySet(Of DETAIL_perso)
	
	Private _CATEGORIE As EntityRef(Of CATEGORIE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCINChanging(value As String)
    End Sub
    Partial Private Sub OnCINChanged()
    End Sub
    Partial Private Sub OnNOMChanging(value As String)
    End Sub
    Partial Private Sub OnNOMChanged()
    End Sub
    Partial Private Sub OnPRENOMChanging(value As String)
    End Sub
    Partial Private Sub OnPRENOMChanged()
    End Sub
    Partial Private Sub OnTELEPHONEChanging(value As String)
    End Sub
    Partial Private Sub OnTELEPHONEChanged()
    End Sub
    Partial Private Sub OnADRESSEChanging(value As String)
    End Sub
    Partial Private Sub OnADRESSEChanged()
    End Sub
    Partial Private Sub OnSALAIREChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSALAIREChanged()
    End Sub
    Partial Private Sub OnMODE_PAYChanging(value As String)
    End Sub
    Partial Private Sub OnMODE_PAYChanged()
    End Sub
    Partial Private Sub OnID_CATEGChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CATEGChanged()
    End Sub
    Partial Private Sub OnCode_chequeChanging(value As String)
    End Sub
    Partial Private Sub OnCode_chequeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DETAIL_persos = New EntitySet(Of DETAIL_perso)(AddressOf Me.attach_DETAIL_persos, AddressOf Me.detach_DETAIL_persos)
		Me._CATEGORIE = CType(Nothing, EntityRef(Of CATEGORIE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIN", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CIN() As String
		Get
			Return Me._CIN
		End Get
		Set
			If (String.Equals(Me._CIN, value) = false) Then
				Me.OnCINChanging(value)
				Me.SendPropertyChanging
				Me._CIN = value
				Me.SendPropertyChanged("CIN")
				Me.OnCINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM", DbType:="NVarChar(50)")>  _
	Public Property NOM() As String
		Get
			Return Me._NOM
		End Get
		Set
			If (String.Equals(Me._NOM, value) = false) Then
				Me.OnNOMChanging(value)
				Me.SendPropertyChanging
				Me._NOM = value
				Me.SendPropertyChanged("NOM")
				Me.OnNOMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRENOM", DbType:="NVarChar(50)")>  _
	Public Property PRENOM() As String
		Get
			Return Me._PRENOM
		End Get
		Set
			If (String.Equals(Me._PRENOM, value) = false) Then
				Me.OnPRENOMChanging(value)
				Me.SendPropertyChanging
				Me._PRENOM = value
				Me.SendPropertyChanged("PRENOM")
				Me.OnPRENOMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEPHONE", DbType:="NVarChar(50)")>  _
	Public Property TELEPHONE() As String
		Get
			Return Me._TELEPHONE
		End Get
		Set
			If (String.Equals(Me._TELEPHONE, value) = false) Then
				Me.OnTELEPHONEChanging(value)
				Me.SendPropertyChanging
				Me._TELEPHONE = value
				Me.SendPropertyChanged("TELEPHONE")
				Me.OnTELEPHONEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADRESSE", DbType:="NVarChar(50)")>  _
	Public Property ADRESSE() As String
		Get
			Return Me._ADRESSE
		End Get
		Set
			If (String.Equals(Me._ADRESSE, value) = false) Then
				Me.OnADRESSEChanging(value)
				Me.SendPropertyChanging
				Me._ADRESSE = value
				Me.SendPropertyChanged("ADRESSE")
				Me.OnADRESSEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SALAIRE", DbType:="Money")>  _
	Public Property SALAIRE() As System.Nullable(Of Decimal)
		Get
			Return Me._SALAIRE
		End Get
		Set
			If (Me._SALAIRE.Equals(value) = false) Then
				Me.OnSALAIREChanging(value)
				Me.SendPropertyChanging
				Me._SALAIRE = value
				Me.SendPropertyChanged("SALAIRE")
				Me.OnSALAIREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODE_PAY", DbType:="NVarChar(50)")>  _
	Public Property MODE_PAY() As String
		Get
			Return Me._MODE_PAY
		End Get
		Set
			If (String.Equals(Me._MODE_PAY, value) = false) Then
				Me.OnMODE_PAYChanging(value)
				Me.SendPropertyChanging
				Me._MODE_PAY = value
				Me.SendPropertyChanged("MODE_PAY")
				Me.OnMODE_PAYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CATEG", DbType:="Int")>  _
	Public Property ID_CATEG() As System.Nullable(Of Integer)
		Get
			Return Me._ID_CATEG
		End Get
		Set
			If (Me._ID_CATEG.Equals(value) = false) Then
				If Me._CATEGORIE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CATEGChanging(value)
				Me.SendPropertyChanging
				Me._ID_CATEG = value
				Me.SendPropertyChanged("ID_CATEG")
				Me.OnID_CATEGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_cheque", DbType:="NVarChar(50)")>  _
	Public Property Code_cheque() As String
		Get
			Return Me._Code_cheque
		End Get
		Set
			If (String.Equals(Me._Code_cheque, value) = false) Then
				Me.OnCode_chequeChanging(value)
				Me.SendPropertyChanging
				Me._Code_cheque = value
				Me.SendPropertyChanged("Code_cheque")
				Me.OnCode_chequeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_DETAIL_perso", Storage:="_DETAIL_persos", ThisKey:="CIN", OtherKey:="CIN")>  _
	Public Property DETAIL_persos() As EntitySet(Of DETAIL_perso)
		Get
			Return Me._DETAIL_persos
		End Get
		Set
			Me._DETAIL_persos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATEGORIE_PERSONNEL", Storage:="_CATEGORIE", ThisKey:="ID_CATEG", OtherKey:="ID_CAT", IsForeignKey:=true)>  _
	Public Property CATEGORIE() As CATEGORIE
		Get
			Return Me._CATEGORIE.Entity
		End Get
		Set
			Dim previousValue As CATEGORIE = Me._CATEGORIE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATEGORIE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATEGORIE.Entity = Nothing
					previousValue.PERSONNEL.Remove(Me)
				End If
				Me._CATEGORIE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PERSONNEL.Add(Me)
					Me._ID_CATEG = value.ID_CAT
				Else
					Me._ID_CATEG = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CATEGORIE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DETAIL_persos(ByVal entity As DETAIL_perso)
		Me.SendPropertyChanging
		entity.PERSONNEL = Me
	End Sub
	
	Private Sub detach_DETAIL_persos(ByVal entity As DETAIL_perso)
		Me.SendPropertyChanging
		entity.PERSONNEL = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DETAIL_perso")>  _
Partial Public Class DETAIL_perso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_DP As Integer
	
	Private _CIN As String
	
	Private _DATE_PAY As Date
	
	Private _PERSONNEL As EntityRef(Of PERSONNEL)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_DPChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DPChanged()
    End Sub
    Partial Private Sub OnCINChanging(value As String)
    End Sub
    Partial Private Sub OnCINChanged()
    End Sub
    Partial Private Sub OnDATE_PAYChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_PAYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PERSONNEL = CType(Nothing, EntityRef(Of PERSONNEL))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DP", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_DP() As Integer
		Get
			Return Me._ID_DP
		End Get
		Set
			If ((Me._ID_DP = value)  _
						= false) Then
				Me.OnID_DPChanging(value)
				Me.SendPropertyChanging
				Me._ID_DP = value
				Me.SendPropertyChanged("ID_DP")
				Me.OnID_DPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIN", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CIN() As String
		Get
			Return Me._CIN
		End Get
		Set
			If (String.Equals(Me._CIN, value) = false) Then
				If Me._PERSONNEL.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCINChanging(value)
				Me.SendPropertyChanging
				Me._CIN = value
				Me.SendPropertyChanged("CIN")
				Me.OnCINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_PAY", DbType:="DateTime NOT NULL")>  _
	Public Property DATE_PAY() As Date
		Get
			Return Me._DATE_PAY
		End Get
		Set
			If ((Me._DATE_PAY = value)  _
						= false) Then
				Me.OnDATE_PAYChanging(value)
				Me.SendPropertyChanging
				Me._DATE_PAY = value
				Me.SendPropertyChanged("DATE_PAY")
				Me.OnDATE_PAYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_DETAIL_perso", Storage:="_PERSONNEL", ThisKey:="CIN", OtherKey:="CIN", IsForeignKey:=true)>  _
	Public Property PERSONNEL() As PERSONNEL
		Get
			Return Me._PERSONNEL.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL = Me._PERSONNEL.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL.Entity = Nothing
					previousValue.DETAIL_persos.Remove(Me)
				End If
				Me._PERSONNEL.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DETAIL_persos.Add(Me)
					Me._CIN = value.CIN
				Else
					Me._CIN = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_detail")>  _
Partial Public Class V_detail
	
	Private _ID_DET As Integer
	
	Private _REF_ART As Integer
	
	Private _NOM_ART As String
	
	Private _DESIGNATION As String
	
	Private _FOURNISSEUR As String
	
	Private _UNITEE As String
	
	Private _PRIX_UNITAIRE As Single
	
	Private _QUANTITE As Integer
	
	Private _MODE_PAY As String
	
	Private _TVA As Single
	
	Private _DATE_DAQUISTATION As Date
	
	Private _MONTANT_HT As Single
	
	Private _MONTANT_TTC As Single
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DET", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID_DET() As Integer
		Get
			Return Me._ID_DET
		End Get
		Set
			If ((Me._ID_DET = value)  _
						= false) Then
				Me._ID_DET = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REF_ART", DbType:="Int")>  _
	Public Property REF_ART() As Integer
		Get
			Return Me._REF_ART
		End Get
		Set
			If ((Me._REF_ART = value)  _
						= false) Then
				Me._REF_ART = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_ART", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property NOM_ART() As String
		Get
			Return Me._NOM_ART
		End Get
		Set
			If (String.Equals(Me._NOM_ART, value) = false) Then
				Me._NOM_ART = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me._DESIGNATION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOURNISSEUR", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property FOURNISSEUR() As String
		Get
			Return Me._FOURNISSEUR
		End Get
		Set
			If (String.Equals(Me._FOURNISSEUR, value) = false) Then
				Me._FOURNISSEUR = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITEE", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property UNITEE() As String
		Get
			Return Me._UNITEE
		End Get
		Set
			If (String.Equals(Me._UNITEE, value) = false) Then
				Me._UNITEE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_UNITAIRE", DbType:="Real")>  _
	Public Property PRIX_UNITAIRE() As Single
		Get
			Return Me._PRIX_UNITAIRE
		End Get
		Set
			If ((Me._PRIX_UNITAIRE = value)  _
						= false) Then
				Me._PRIX_UNITAIRE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITE", DbType:="Int")>  _
	Public Property QUANTITE() As Integer
		Get
			Return Me._QUANTITE
		End Get
		Set
			If ((Me._QUANTITE = value)  _
						= false) Then
				Me._QUANTITE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODE_PAY", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property MODE_PAY() As String
		Get
			Return Me._MODE_PAY
		End Get
		Set
			If (String.Equals(Me._MODE_PAY, value) = false) Then
				Me._MODE_PAY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TVA", DbType:="Real")>  _
	Public Property TVA() As Single
		Get
			Return Me._TVA
		End Get
		Set
			If ((Me._TVA = value)  _
						= false) Then
				Me._TVA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_DAQUISTATION", DbType:="Date")>  _
	Public Property DATE_DAQUISTATION() As Date
		Get
			Return Me._DATE_DAQUISTATION
		End Get
		Set
			If ((Me._DATE_DAQUISTATION = value)  _
						= false) Then
				Me._DATE_DAQUISTATION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTANT_HT", DbType:="Real")>  _
	Public Property MONTANT_HT() As Single
		Get
			Return Me._MONTANT_HT
		End Get
		Set
			If ((Me._MONTANT_HT = value)  _
						= false) Then
				Me._MONTANT_HT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTANT_TTC", DbType:="Real")>  _
	Public Property MONTANT_TTC() As Single
		Get
			Return Me._MONTANT_TTC
		End Get
		Set
			If ((Me._MONTANT_TTC = value)  _
						= false) Then
				Me._MONTANT_TTC = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_Per")>  _
Partial Public Class V_Per
	
	Private _CIN As String
	
	Private _NOM As String
	
	Private _PRENOM As String
	
	Private _DATE_PAY As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIN", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CIN() As String
		Get
			Return Me._CIN
		End Get
		Set
			If (String.Equals(Me._CIN, value) = false) Then
				Me._CIN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM", DbType:="NVarChar(50)")>  _
	Public Property NOM() As String
		Get
			Return Me._NOM
		End Get
		Set
			If (String.Equals(Me._NOM, value) = false) Then
				Me._NOM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRENOM", DbType:="NVarChar(50)")>  _
	Public Property PRENOM() As String
		Get
			Return Me._PRENOM
		End Get
		Set
			If (String.Equals(Me._PRENOM, value) = false) Then
				Me._PRENOM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_PAY", DbType:="DateTime NOT NULL")>  _
	Public Property DATE_PAY() As Date
		Get
			Return Me._DATE_PAY
		End Get
		Set
			If ((Me._DATE_PAY = value)  _
						= false) Then
				Me._DATE_PAY = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DETAIL")>  _
Partial Public Class DETAIL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_DET As Integer
	
	Private _ID As String
	
	Private _REF_ART As System.Nullable(Of Integer)
	
	Private _NOM_ART As String
	
	Private _DESIGNATION As String
	
	Private _FOURNISSEUR As String
	
	Private _UNITEE As String
	
	Private _PRIX_UNITAIRE As System.Nullable(Of Single)
	
	Private _QUANTITE As System.Nullable(Of Integer)
	
	Private _MODE_PAY As String
	
	Private _TVA As System.Nullable(Of Single)
	
	Private _DATE_DAQUISTATION As System.Nullable(Of Date)
	
	Private _MONTANT_HT As System.Nullable(Of Single)
	
	Private _MONTANT_TTC As System.Nullable(Of Single)
	
	Private _ARTICLE As EntityRef(Of ARTICLE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_DETChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DETChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREF_ARTChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREF_ARTChanged()
    End Sub
    Partial Private Sub OnNOM_ARTChanging(value As String)
    End Sub
    Partial Private Sub OnNOM_ARTChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    Partial Private Sub OnFOURNISSEURChanging(value As String)
    End Sub
    Partial Private Sub OnFOURNISSEURChanged()
    End Sub
    Partial Private Sub OnUNITEEChanging(value As String)
    End Sub
    Partial Private Sub OnUNITEEChanged()
    End Sub
    Partial Private Sub OnPRIX_UNITAIREChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnPRIX_UNITAIREChanged()
    End Sub
    Partial Private Sub OnQUANTITEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQUANTITEChanged()
    End Sub
    Partial Private Sub OnMODE_PAYChanging(value As String)
    End Sub
    Partial Private Sub OnMODE_PAYChanged()
    End Sub
    Partial Private Sub OnTVAChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnTVAChanged()
    End Sub
    Partial Private Sub OnDATE_DAQUISTATIONChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDATE_DAQUISTATIONChanged()
    End Sub
    Partial Private Sub OnMONTANT_HTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnMONTANT_HTChanged()
    End Sub
    Partial Private Sub OnMONTANT_TTCChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnMONTANT_TTCChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ARTICLE = CType(Nothing, EntityRef(Of ARTICLE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DET", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_DET() As Integer
		Get
			Return Me._ID_DET
		End Get
		Set
			If ((Me._ID_DET = value)  _
						= false) Then
				Me.OnID_DETChanging(value)
				Me.SendPropertyChanging
				Me._ID_DET = value
				Me.SendPropertyChanged("ID_DET")
				Me.OnID_DETChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REF_ART", DbType:="Int")>  _
	Public Property REF_ART() As System.Nullable(Of Integer)
		Get
			Return Me._REF_ART
		End Get
		Set
			If (Me._REF_ART.Equals(value) = false) Then
				If Me._ARTICLE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREF_ARTChanging(value)
				Me.SendPropertyChanging
				Me._REF_ART = value
				Me.SendPropertyChanged("REF_ART")
				Me.OnREF_ARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_ART", DbType:="NVarChar(50)")>  _
	Public Property NOM_ART() As String
		Get
			Return Me._NOM_ART
		End Get
		Set
			If (String.Equals(Me._NOM_ART, value) = false) Then
				Me.OnNOM_ARTChanging(value)
				Me.SendPropertyChanging
				Me._NOM_ART = value
				Me.SendPropertyChanged("NOM_ART")
				Me.OnNOM_ARTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="NVarChar(50)")>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOURNISSEUR", DbType:="NVarChar(50)")>  _
	Public Property FOURNISSEUR() As String
		Get
			Return Me._FOURNISSEUR
		End Get
		Set
			If (String.Equals(Me._FOURNISSEUR, value) = false) Then
				Me.OnFOURNISSEURChanging(value)
				Me.SendPropertyChanging
				Me._FOURNISSEUR = value
				Me.SendPropertyChanged("FOURNISSEUR")
				Me.OnFOURNISSEURChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITEE", DbType:="NVarChar(50)")>  _
	Public Property UNITEE() As String
		Get
			Return Me._UNITEE
		End Get
		Set
			If (String.Equals(Me._UNITEE, value) = false) Then
				Me.OnUNITEEChanging(value)
				Me.SendPropertyChanging
				Me._UNITEE = value
				Me.SendPropertyChanged("UNITEE")
				Me.OnUNITEEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_UNITAIRE", DbType:="Real")>  _
	Public Property PRIX_UNITAIRE() As System.Nullable(Of Single)
		Get
			Return Me._PRIX_UNITAIRE
		End Get
		Set
			If (Me._PRIX_UNITAIRE.Equals(value) = false) Then
				Me.OnPRIX_UNITAIREChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_UNITAIRE = value
				Me.SendPropertyChanged("PRIX_UNITAIRE")
				Me.OnPRIX_UNITAIREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUANTITE", DbType:="Int")>  _
	Public Property QUANTITE() As System.Nullable(Of Integer)
		Get
			Return Me._QUANTITE
		End Get
		Set
			If (Me._QUANTITE.Equals(value) = false) Then
				Me.OnQUANTITEChanging(value)
				Me.SendPropertyChanging
				Me._QUANTITE = value
				Me.SendPropertyChanged("QUANTITE")
				Me.OnQUANTITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODE_PAY", DbType:="NVarChar(50)")>  _
	Public Property MODE_PAY() As String
		Get
			Return Me._MODE_PAY
		End Get
		Set
			If (String.Equals(Me._MODE_PAY, value) = false) Then
				Me.OnMODE_PAYChanging(value)
				Me.SendPropertyChanging
				Me._MODE_PAY = value
				Me.SendPropertyChanged("MODE_PAY")
				Me.OnMODE_PAYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TVA", DbType:="Real")>  _
	Public Property TVA() As System.Nullable(Of Single)
		Get
			Return Me._TVA
		End Get
		Set
			If (Me._TVA.Equals(value) = false) Then
				Me.OnTVAChanging(value)
				Me.SendPropertyChanging
				Me._TVA = value
				Me.SendPropertyChanged("TVA")
				Me.OnTVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_DAQUISTATION", DbType:="DateTime")>  _
	Public Property DATE_DAQUISTATION() As System.Nullable(Of Date)
		Get
			Return Me._DATE_DAQUISTATION
		End Get
		Set
			If (Me._DATE_DAQUISTATION.Equals(value) = false) Then
				Me.OnDATE_DAQUISTATIONChanging(value)
				Me.SendPropertyChanging
				Me._DATE_DAQUISTATION = value
				Me.SendPropertyChanged("DATE_DAQUISTATION")
				Me.OnDATE_DAQUISTATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTANT_HT", DbType:="Real")>  _
	Public Property MONTANT_HT() As System.Nullable(Of Single)
		Get
			Return Me._MONTANT_HT
		End Get
		Set
			If (Me._MONTANT_HT.Equals(value) = false) Then
				Me.OnMONTANT_HTChanging(value)
				Me.SendPropertyChanging
				Me._MONTANT_HT = value
				Me.SendPropertyChanged("MONTANT_HT")
				Me.OnMONTANT_HTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTANT_TTC", DbType:="Real")>  _
	Public Property MONTANT_TTC() As System.Nullable(Of Single)
		Get
			Return Me._MONTANT_TTC
		End Get
		Set
			If (Me._MONTANT_TTC.Equals(value) = false) Then
				Me.OnMONTANT_TTCChanging(value)
				Me.SendPropertyChanging
				Me._MONTANT_TTC = value
				Me.SendPropertyChanged("MONTANT_TTC")
				Me.OnMONTANT_TTCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ARTICLE_DETAIL", Storage:="_ARTICLE", ThisKey:="REF_ART", OtherKey:="REF_ART", IsForeignKey:=true)>  _
	Public Property ARTICLE() As ARTICLE
		Get
			Return Me._ARTICLE.Entity
		End Get
		Set
			Dim previousValue As ARTICLE = Me._ARTICLE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ARTICLE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ARTICLE.Entity = Nothing
					previousValue.DETAILs.Remove(Me)
				End If
				Me._ARTICLE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DETAILs.Add(Me)
					Me._REF_ART = value.REF_ART
				Else
					Me._REF_ART = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ARTICLE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
