'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :4.0.30319.18449
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="projet_Gestion_archiveur")>  _
Partial Public Class _archiveDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Définitions de méthodes d'extensibilité"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertArchiveur(instance As Archiveur)
    End Sub
  Partial Private Sub UpdateArchiveur(instance As Archiveur)
    End Sub
  Partial Private Sub DeleteArchiveur(instance As Archiveur)
    End Sub
  Partial Private Sub InsertUtilisateur(instance As Utilisateur)
    End Sub
  Partial Private Sub UpdateUtilisateur(instance As Utilisateur)
    End Sub
  Partial Private Sub DeleteUtilisateur(instance As Utilisateur)
    End Sub
  Partial Private Sub InsertDossier(instance As Dossier)
    End Sub
  Partial Private Sub UpdateDossier(instance As Dossier)
    End Sub
  Partial Private Sub DeleteDossier(instance As Dossier)
    End Sub
  Partial Private Sub InsertEmplacement(instance As Emplacement)
    End Sub
  Partial Private Sub UpdateEmplacement(instance As Emplacement)
    End Sub
  Partial Private Sub DeleteEmplacement(instance As Emplacement)
    End Sub
  Partial Private Sub InsertHistorique_Dos(instance As Historique_Dos)
    End Sub
  Partial Private Sub UpdateHistorique_Dos(instance As Historique_Dos)
    End Sub
  Partial Private Sub DeleteHistorique_Dos(instance As Historique_Dos)
    End Sub
  Partial Private Sub InsertMvt_Dossier(instance As Mvt_Dossier)
    End Sub
  Partial Private Sub UpdateMvt_Dossier(instance As Mvt_Dossier)
    End Sub
  Partial Private Sub DeleteMvt_Dossier(instance As Mvt_Dossier)
    End Sub
  Partial Private Sub InsertRoles(instance As Roles)
    End Sub
  Partial Private Sub UpdateRoles(instance As Roles)
    End Sub
  Partial Private Sub DeleteRoles(instance As Roles)
    End Sub
  Partial Private Sub InsertSalle(instance As Salle)
    End Sub
  Partial Private Sub UpdateSalle(instance As Salle)
    End Sub
  Partial Private Sub DeleteSalle(instance As Salle)
    End Sub
  Partial Private Sub InsertService(instance As Service)
    End Sub
  Partial Private Sub UpdateService(instance As Service)
    End Sub
  Partial Private Sub DeleteService(instance As Service)
    End Sub
  Partial Private Sub InsertType_Mouvement(instance As Type_Mouvement)
    End Sub
  Partial Private Sub UpdateType_Mouvement(instance As Type_Mouvement)
    End Sub
  Partial Private Sub DeleteType_Mouvement(instance As Type_Mouvement)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Projet_Al_Omrane.My.MySettings.Default.projet_Gestion_archiveurConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Archiveur() As System.Data.Linq.Table(Of Archiveur)
		Get
			Return Me.GetTable(Of Archiveur)
		End Get
	End Property
	
	Public ReadOnly Property Utilisateur() As System.Data.Linq.Table(Of Utilisateur)
		Get
			Return Me.GetTable(Of Utilisateur)
		End Get
	End Property
	
	Public ReadOnly Property Dossier() As System.Data.Linq.Table(Of Dossier)
		Get
			Return Me.GetTable(Of Dossier)
		End Get
	End Property
	
	Public ReadOnly Property Emplacement() As System.Data.Linq.Table(Of Emplacement)
		Get
			Return Me.GetTable(Of Emplacement)
		End Get
	End Property
	
	Public ReadOnly Property Historique_Dos() As System.Data.Linq.Table(Of Historique_Dos)
		Get
			Return Me.GetTable(Of Historique_Dos)
		End Get
	End Property
	
	Public ReadOnly Property Mvt_Dossier() As System.Data.Linq.Table(Of Mvt_Dossier)
		Get
			Return Me.GetTable(Of Mvt_Dossier)
		End Get
	End Property
	
	Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Roles)
		Get
			Return Me.GetTable(Of Roles)
		End Get
	End Property
	
	Public ReadOnly Property Salle() As System.Data.Linq.Table(Of Salle)
		Get
			Return Me.GetTable(Of Salle)
		End Get
	End Property
	
	Public ReadOnly Property Service() As System.Data.Linq.Table(Of Service)
		Get
			Return Me.GetTable(Of Service)
		End Get
	End Property
	
	Public ReadOnly Property Type_Mouvement() As System.Data.Linq.Table(Of Type_Mouvement)
		Get
			Return Me.GetTable(Of Type_Mouvement)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Archiveur")>  _
Partial Public Class Archiveur
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_archiv As Integer
	
	Private _code_salle As System.Nullable(Of Integer)
	
	Private _nom As String
	
	Private _prenom As String
	
	Private _Mot_pass As String
	
	Private _services As String
	
	Private _roles As String
	
	Private _Salle As EntityRef(Of Salle)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_archivChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_archivChanged()
    End Sub
    Partial Private Sub Oncode_salleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_salleChanged()
    End Sub
    Partial Private Sub OnnomChanging(value As String)
    End Sub
    Partial Private Sub OnnomChanged()
    End Sub
    Partial Private Sub OnprenomChanging(value As String)
    End Sub
    Partial Private Sub OnprenomChanged()
    End Sub
    Partial Private Sub OnMot_passChanging(value As String)
    End Sub
    Partial Private Sub OnMot_passChanged()
    End Sub
    Partial Private Sub OnservicesChanging(value As String)
    End Sub
    Partial Private Sub OnservicesChanged()
    End Sub
    Partial Private Sub OnrolesChanging(value As String)
    End Sub
    Partial Private Sub OnrolesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Salle = CType(Nothing, EntityRef(Of Salle))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_archiv", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Code_archiv() As Integer
		Get
			Return Me._Code_archiv
		End Get
		Set
			If ((Me._Code_archiv = value)  _
						= false) Then
				Me.OnCode_archivChanging(value)
				Me.SendPropertyChanging
				Me._Code_archiv = value
				Me.SendPropertyChanged("Code_archiv")
				Me.OnCode_archivChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_salle", DbType:="Int")>  _
	Public Property code_salle() As System.Nullable(Of Integer)
		Get
			Return Me._code_salle
		End Get
		Set
			If (Me._code_salle.Equals(value) = false) Then
				If Me._Salle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncode_salleChanging(value)
				Me.SendPropertyChanging
				Me._code_salle = value
				Me.SendPropertyChanged("code_salle")
				Me.Oncode_salleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nom", DbType:="VarChar(20)")>  _
	Public Property nom() As String
		Get
			Return Me._nom
		End Get
		Set
			If (String.Equals(Me._nom, value) = false) Then
				Me.OnnomChanging(value)
				Me.SendPropertyChanging
				Me._nom = value
				Me.SendPropertyChanged("nom")
				Me.OnnomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prenom", DbType:="VarChar(20)")>  _
	Public Property prenom() As String
		Get
			Return Me._prenom
		End Get
		Set
			If (String.Equals(Me._prenom, value) = false) Then
				Me.OnprenomChanging(value)
				Me.SendPropertyChanging
				Me._prenom = value
				Me.SendPropertyChanged("prenom")
				Me.OnprenomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mot_pass", DbType:="NVarChar(50)")>  _
	Public Property Mot_pass() As String
		Get
			Return Me._Mot_pass
		End Get
		Set
			If (String.Equals(Me._Mot_pass, value) = false) Then
				Me.OnMot_passChanging(value)
				Me.SendPropertyChanging
				Me._Mot_pass = value
				Me.SendPropertyChanged("Mot_pass")
				Me.OnMot_passChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_services", DbType:="NVarChar(20)")>  _
	Public Property services() As String
		Get
			Return Me._services
		End Get
		Set
			If (String.Equals(Me._services, value) = false) Then
				Me.OnservicesChanging(value)
				Me.SendPropertyChanging
				Me._services = value
				Me.SendPropertyChanged("services")
				Me.OnservicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roles", DbType:="NVarChar(20)")>  _
	Public Property roles() As String
		Get
			Return Me._roles
		End Get
		Set
			If (String.Equals(Me._roles, value) = false) Then
				Me.OnrolesChanging(value)
				Me.SendPropertyChanging
				Me._roles = value
				Me.SendPropertyChanged("roles")
				Me.OnrolesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Salle_Archiveur", Storage:="_Salle", ThisKey:="code_salle", OtherKey:="Code_Salle", IsForeignKey:=true)>  _
	Public Property Salle() As Salle
		Get
			Return Me._Salle.Entity
		End Get
		Set
			Dim previousValue As Salle = Me._Salle.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Salle.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Salle.Entity = Nothing
					previousValue.Archiveur.Remove(Me)
				End If
				Me._Salle.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Archiveur.Add(Me)
					Me._code_salle = value.Code_Salle
				Else
					Me._code_salle = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Salle")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Utilisateur")>  _
Partial Public Class Utilisateur
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Matricule As Integer
	
	Private _Nom_U As String
	
	Private _Prenom_U As String
	
	Private _Mot_pass As String
	
	Private _code_role As System.Nullable(Of Integer)
	
	Private _code_service As System.Nullable(Of Integer)
	
	Private _Mvt_Dossier As EntitySet(Of Mvt_Dossier)
	
	Private _Roles As EntityRef(Of Roles)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMatriculeChanging(value As Integer)
    End Sub
    Partial Private Sub OnMatriculeChanged()
    End Sub
    Partial Private Sub OnNom_UChanging(value As String)
    End Sub
    Partial Private Sub OnNom_UChanged()
    End Sub
    Partial Private Sub OnPrenom_UChanging(value As String)
    End Sub
    Partial Private Sub OnPrenom_UChanged()
    End Sub
    Partial Private Sub OnMot_passChanging(value As String)
    End Sub
    Partial Private Sub OnMot_passChanged()
    End Sub
    Partial Private Sub Oncode_roleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_roleChanged()
    End Sub
    Partial Private Sub Oncode_serviceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_serviceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mvt_Dossier = New EntitySet(Of Mvt_Dossier)(AddressOf Me.attach_Mvt_Dossier, AddressOf Me.detach_Mvt_Dossier)
		Me._Roles = CType(Nothing, EntityRef(Of Roles))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Matricule", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Matricule() As Integer
		Get
			Return Me._Matricule
		End Get
		Set
			If ((Me._Matricule = value)  _
						= false) Then
				Me.OnMatriculeChanging(value)
				Me.SendPropertyChanging
				Me._Matricule = value
				Me.SendPropertyChanged("Matricule")
				Me.OnMatriculeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom_U", DbType:="VarChar(20)")>  _
	Public Property Nom_U() As String
		Get
			Return Me._Nom_U
		End Get
		Set
			If (String.Equals(Me._Nom_U, value) = false) Then
				Me.OnNom_UChanging(value)
				Me.SendPropertyChanging
				Me._Nom_U = value
				Me.SendPropertyChanged("Nom_U")
				Me.OnNom_UChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prenom_U", DbType:="VarChar(20)")>  _
	Public Property Prenom_U() As String
		Get
			Return Me._Prenom_U
		End Get
		Set
			If (String.Equals(Me._Prenom_U, value) = false) Then
				Me.OnPrenom_UChanging(value)
				Me.SendPropertyChanging
				Me._Prenom_U = value
				Me.SendPropertyChanged("Prenom_U")
				Me.OnPrenom_UChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mot_pass", DbType:="NVarChar(20)")>  _
	Public Property Mot_pass() As String
		Get
			Return Me._Mot_pass
		End Get
		Set
			If (String.Equals(Me._Mot_pass, value) = false) Then
				Me.OnMot_passChanging(value)
				Me.SendPropertyChanging
				Me._Mot_pass = value
				Me.SendPropertyChanged("Mot_pass")
				Me.OnMot_passChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_role", DbType:="Int")>  _
	Public Property code_role() As System.Nullable(Of Integer)
		Get
			Return Me._code_role
		End Get
		Set
			If (Me._code_role.Equals(value) = false) Then
				If Me._Roles.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncode_roleChanging(value)
				Me.SendPropertyChanging
				Me._code_role = value
				Me.SendPropertyChanged("code_role")
				Me.Oncode_roleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_service", DbType:="Int")>  _
	Public Property code_service() As System.Nullable(Of Integer)
		Get
			Return Me._code_service
		End Get
		Set
			If (Me._code_service.Equals(value) = false) Then
				Me.Oncode_serviceChanging(value)
				Me.SendPropertyChanging
				Me._code_service = value
				Me.SendPropertyChanged("code_service")
				Me.Oncode_serviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Utilisateur_Mvt_Dossier", Storage:="_Mvt_Dossier", ThisKey:="Matricule", OtherKey:="matricule")>  _
	Public Property Mvt_Dossier() As EntitySet(Of Mvt_Dossier)
		Get
			Return Me._Mvt_Dossier
		End Get
		Set
			Me._Mvt_Dossier.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Roles_Utilisateur", Storage:="_Roles", ThisKey:="code_role", OtherKey:="Code_Role", IsForeignKey:=true)>  _
	Public Property Roles() As Roles
		Get
			Return Me._Roles.Entity
		End Get
		Set
			Dim previousValue As Roles = Me._Roles.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Roles.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Roles.Entity = Nothing
					previousValue.Utilisateur.Remove(Me)
				End If
				Me._Roles.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Utilisateur.Add(Me)
					Me._code_role = value.Code_Role
				Else
					Me._code_role = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Roles")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Mvt_Dossier(ByVal entity As Mvt_Dossier)
		Me.SendPropertyChanging
		entity.Utilisateur = Me
	End Sub
	
	Private Sub detach_Mvt_Dossier(ByVal entity As Mvt_Dossier)
		Me.SendPropertyChanging
		entity.Utilisateur = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Dossier")>  _
Partial Public Class Dossier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_Dossier As Integer
	
	Private _Reference As String
	
	Private _exercice As Integer
	
	Private _Date_Depot As Date
	
	Private _Num_Ordre As Integer
	
	Private _adresse As String
	
	Private _code_service As Integer
	
	Private _etat_doss As String
	
	Private _Mvt_Dossier As EntitySet(Of Mvt_Dossier)
	
	Private _Emplacement As EntityRef(Of Emplacement)
	
	Private _Service As EntityRef(Of Service)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_DossierChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_DossierChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnexerciceChanging(value As Integer)
    End Sub
    Partial Private Sub OnexerciceChanged()
    End Sub
    Partial Private Sub OnDate_DepotChanging(value As Date)
    End Sub
    Partial Private Sub OnDate_DepotChanged()
    End Sub
    Partial Private Sub OnNum_OrdreChanging(value As Integer)
    End Sub
    Partial Private Sub OnNum_OrdreChanged()
    End Sub
    Partial Private Sub OnadresseChanging(value As String)
    End Sub
    Partial Private Sub OnadresseChanged()
    End Sub
    Partial Private Sub Oncode_serviceChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_serviceChanged()
    End Sub
    Partial Private Sub Onetat_dossChanging(value As String)
    End Sub
    Partial Private Sub Onetat_dossChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mvt_Dossier = New EntitySet(Of Mvt_Dossier)(AddressOf Me.attach_Mvt_Dossier, AddressOf Me.detach_Mvt_Dossier)
		Me._Emplacement = CType(Nothing, EntityRef(Of Emplacement))
		Me._Service = CType(Nothing, EntityRef(Of Service))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_Dossier", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Code_Dossier() As Integer
		Get
			Return Me._Code_Dossier
		End Get
		Set
			If ((Me._Code_Dossier = value)  _
						= false) Then
				Me.OnCode_DossierChanging(value)
				Me.SendPropertyChanging
				Me._Code_Dossier = value
				Me.SendPropertyChanged("Code_Dossier")
				Me.OnCode_DossierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exercice", DbType:="Int NOT NULL")>  _
	Public Property exercice() As Integer
		Get
			Return Me._exercice
		End Get
		Set
			If ((Me._exercice = value)  _
						= false) Then
				Me.OnexerciceChanging(value)
				Me.SendPropertyChanging
				Me._exercice = value
				Me.SendPropertyChanged("exercice")
				Me.OnexerciceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_Depot", DbType:="DateTime NOT NULL")>  _
	Public Property Date_Depot() As Date
		Get
			Return Me._Date_Depot
		End Get
		Set
			If ((Me._Date_Depot = value)  _
						= false) Then
				Me.OnDate_DepotChanging(value)
				Me.SendPropertyChanging
				Me._Date_Depot = value
				Me.SendPropertyChanged("Date_Depot")
				Me.OnDate_DepotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num_Ordre", DbType:="Int NOT NULL")>  _
	Public Property Num_Ordre() As Integer
		Get
			Return Me._Num_Ordre
		End Get
		Set
			If ((Me._Num_Ordre = value)  _
						= false) Then
				Me.OnNum_OrdreChanging(value)
				Me.SendPropertyChanging
				Me._Num_Ordre = value
				Me.SendPropertyChanged("Num_Ordre")
				Me.OnNum_OrdreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adresse", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property adresse() As String
		Get
			Return Me._adresse
		End Get
		Set
			If (String.Equals(Me._adresse, value) = false) Then
				If Me._Emplacement.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnadresseChanging(value)
				Me.SendPropertyChanging
				Me._adresse = value
				Me.SendPropertyChanged("adresse")
				Me.OnadresseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_service", DbType:="Int NOT NULL")>  _
	Public Property code_service() As Integer
		Get
			Return Me._code_service
		End Get
		Set
			If ((Me._code_service = value)  _
						= false) Then
				If Me._Service.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncode_serviceChanging(value)
				Me.SendPropertyChanging
				Me._code_service = value
				Me.SendPropertyChanged("code_service")
				Me.Oncode_serviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_etat_doss", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property etat_doss() As String
		Get
			Return Me._etat_doss
		End Get
		Set
			If (String.Equals(Me._etat_doss, value) = false) Then
				Me.Onetat_dossChanging(value)
				Me.SendPropertyChanging
				Me._etat_doss = value
				Me.SendPropertyChanged("etat_doss")
				Me.Onetat_dossChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Dossier_Mvt_Dossier", Storage:="_Mvt_Dossier", ThisKey:="Code_Dossier", OtherKey:="code_dossier")>  _
	Public Property Mvt_Dossier() As EntitySet(Of Mvt_Dossier)
		Get
			Return Me._Mvt_Dossier
		End Get
		Set
			Me._Mvt_Dossier.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Emplacement_Dossier", Storage:="_Emplacement", ThisKey:="adresse", OtherKey:="Adresse", IsForeignKey:=true)>  _
	Public Property Emplacement() As Emplacement
		Get
			Return Me._Emplacement.Entity
		End Get
		Set
			Dim previousValue As Emplacement = Me._Emplacement.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Emplacement.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Emplacement.Entity = Nothing
					previousValue.Dossier.Remove(Me)
				End If
				Me._Emplacement.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Dossier.Add(Me)
					Me._adresse = value.Adresse
				Else
					Me._adresse = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Emplacement")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Service_Dossier", Storage:="_Service", ThisKey:="code_service", OtherKey:="Code_Service", IsForeignKey:=true)>  _
	Public Property Service() As Service
		Get
			Return Me._Service.Entity
		End Get
		Set
			Dim previousValue As Service = Me._Service.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Service.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Service.Entity = Nothing
					previousValue.Dossier.Remove(Me)
				End If
				Me._Service.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Dossier.Add(Me)
					Me._code_service = value.Code_Service
				Else
					Me._code_service = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Service")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Mvt_Dossier(ByVal entity As Mvt_Dossier)
		Me.SendPropertyChanging
		entity.Dossier = Me
	End Sub
	
	Private Sub detach_Mvt_Dossier(ByVal entity As Mvt_Dossier)
		Me.SendPropertyChanging
		entity.Dossier = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Emplacement")>  _
Partial Public Class Emplacement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_emp As System.Nullable(Of Integer)
	
	Private _Adresse As String
	
	Private _Etat As String
	
	Private _code_salle As System.Nullable(Of Integer)
	
	Private _Dossier As EntitySet(Of Dossier)
	
	Private _Salle As EntityRef(Of Salle)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_empChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCode_empChanged()
    End Sub
    Partial Private Sub OnAdresseChanging(value As String)
    End Sub
    Partial Private Sub OnAdresseChanged()
    End Sub
    Partial Private Sub OnEtatChanging(value As String)
    End Sub
    Partial Private Sub OnEtatChanged()
    End Sub
    Partial Private Sub Oncode_salleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_salleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Dossier = New EntitySet(Of Dossier)(AddressOf Me.attach_Dossier, AddressOf Me.detach_Dossier)
		Me._Salle = CType(Nothing, EntityRef(Of Salle))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_emp", DbType:="Int")>  _
	Public Property Code_emp() As System.Nullable(Of Integer)
		Get
			Return Me._Code_emp
		End Get
		Set
			If (Me._Code_emp.Equals(value) = false) Then
				Me.OnCode_empChanging(value)
				Me.SendPropertyChanging
				Me._Code_emp = value
				Me.SendPropertyChanged("Code_emp")
				Me.OnCode_empChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Adresse", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Adresse() As String
		Get
			Return Me._Adresse
		End Get
		Set
			If (String.Equals(Me._Adresse, value) = false) Then
				Me.OnAdresseChanging(value)
				Me.SendPropertyChanging
				Me._Adresse = value
				Me.SendPropertyChanged("Adresse")
				Me.OnAdresseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Etat", DbType:="VarChar(50)")>  _
	Public Property Etat() As String
		Get
			Return Me._Etat
		End Get
		Set
			If (String.Equals(Me._Etat, value) = false) Then
				Me.OnEtatChanging(value)
				Me.SendPropertyChanging
				Me._Etat = value
				Me.SendPropertyChanged("Etat")
				Me.OnEtatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_salle", DbType:="Int")>  _
	Public Property code_salle() As System.Nullable(Of Integer)
		Get
			Return Me._code_salle
		End Get
		Set
			If (Me._code_salle.Equals(value) = false) Then
				If Me._Salle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncode_salleChanging(value)
				Me.SendPropertyChanging
				Me._code_salle = value
				Me.SendPropertyChanged("code_salle")
				Me.Oncode_salleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Emplacement_Dossier", Storage:="_Dossier", ThisKey:="Adresse", OtherKey:="adresse")>  _
	Public Property Dossier() As EntitySet(Of Dossier)
		Get
			Return Me._Dossier
		End Get
		Set
			Me._Dossier.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Salle_Emplacement", Storage:="_Salle", ThisKey:="code_salle", OtherKey:="Code_Salle", IsForeignKey:=true)>  _
	Public Property Salle() As Salle
		Get
			Return Me._Salle.Entity
		End Get
		Set
			Dim previousValue As Salle = Me._Salle.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Salle.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Salle.Entity = Nothing
					previousValue.Emplacement.Remove(Me)
				End If
				Me._Salle.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Emplacement.Add(Me)
					Me._code_salle = value.Code_Salle
				Else
					Me._code_salle = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Salle")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Dossier(ByVal entity As Dossier)
		Me.SendPropertyChanging
		entity.Emplacement = Me
	End Sub
	
	Private Sub detach_Dossier(ByVal entity As Dossier)
		Me.SendPropertyChanging
		entity.Emplacement = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Historique_Dos")>  _
Partial Public Class Historique_Dos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _code_dos As Integer
	
	Private _Reference As String
	
	Private _exercice As String
	
	Private _Date_depot As System.Nullable(Of Date)
	
	Private _num_ordre As System.Nullable(Of Integer)
	
	Private _adresse As String
	
	Private _code_service As System.Nullable(Of Integer)
	
	Private _etat_doss As String
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncode_dosChanging(value As Integer)
    End Sub
    Partial Private Sub Oncode_dosChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnexerciceChanging(value As String)
    End Sub
    Partial Private Sub OnexerciceChanged()
    End Sub
    Partial Private Sub OnDate_depotChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDate_depotChanged()
    End Sub
    Partial Private Sub Onnum_ordreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnum_ordreChanged()
    End Sub
    Partial Private Sub OnadresseChanging(value As String)
    End Sub
    Partial Private Sub OnadresseChanged()
    End Sub
    Partial Private Sub Oncode_serviceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_serviceChanged()
    End Sub
    Partial Private Sub Onetat_dossChanging(value As String)
    End Sub
    Partial Private Sub Onetat_dossChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_dos", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property code_dos() As Integer
		Get
			Return Me._code_dos
		End Get
		Set
			If ((Me._code_dos = value)  _
						= false) Then
				Me.Oncode_dosChanging(value)
				Me.SendPropertyChanging
				Me._code_dos = value
				Me.SendPropertyChanged("code_dos")
				Me.Oncode_dosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(20)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exercice", DbType:="NVarChar(20)")>  _
	Public Property exercice() As String
		Get
			Return Me._exercice
		End Get
		Set
			If (String.Equals(Me._exercice, value) = false) Then
				Me.OnexerciceChanging(value)
				Me.SendPropertyChanging
				Me._exercice = value
				Me.SendPropertyChanged("exercice")
				Me.OnexerciceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_depot", DbType:="DateTime")>  _
	Public Property Date_depot() As System.Nullable(Of Date)
		Get
			Return Me._Date_depot
		End Get
		Set
			If (Me._Date_depot.Equals(value) = false) Then
				Me.OnDate_depotChanging(value)
				Me.SendPropertyChanging
				Me._Date_depot = value
				Me.SendPropertyChanged("Date_depot")
				Me.OnDate_depotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_num_ordre", DbType:="Int")>  _
	Public Property num_ordre() As System.Nullable(Of Integer)
		Get
			Return Me._num_ordre
		End Get
		Set
			If (Me._num_ordre.Equals(value) = false) Then
				Me.Onnum_ordreChanging(value)
				Me.SendPropertyChanging
				Me._num_ordre = value
				Me.SendPropertyChanged("num_ordre")
				Me.Onnum_ordreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adresse", DbType:="NVarChar(50)")>  _
	Public Property adresse() As String
		Get
			Return Me._adresse
		End Get
		Set
			If (String.Equals(Me._adresse, value) = false) Then
				Me.OnadresseChanging(value)
				Me.SendPropertyChanging
				Me._adresse = value
				Me.SendPropertyChanged("adresse")
				Me.OnadresseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_service", DbType:="Int")>  _
	Public Property code_service() As System.Nullable(Of Integer)
		Get
			Return Me._code_service
		End Get
		Set
			If (Me._code_service.Equals(value) = false) Then
				Me.Oncode_serviceChanging(value)
				Me.SendPropertyChanging
				Me._code_service = value
				Me.SendPropertyChanged("code_service")
				Me.Oncode_serviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_etat_doss", DbType:="NVarChar(50)")>  _
	Public Property etat_doss() As String
		Get
			Return Me._etat_doss
		End Get
		Set
			If (String.Equals(Me._etat_doss, value) = false) Then
				Me.Onetat_dossChanging(value)
				Me.SendPropertyChanging
				Me._etat_doss = value
				Me.SendPropertyChanged("etat_doss")
				Me.Onetat_dossChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mvt_Dossier")>  _
Partial Public Class Mvt_Dossier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_Mvt As Integer
	
	Private _code_dossier As System.Nullable(Of Integer)
	
	Private _matricule As System.Nullable(Of Integer)
	
	Private _Date_entree As System.Nullable(Of Date)
	
	Private _Date_Sortie As System.Nullable(Of Date)
	
	Private _code_type_mvt As System.Nullable(Of Integer)
	
	Private _Dossier As EntityRef(Of Dossier)
	
	Private _Utilisateur As EntityRef(Of Utilisateur)
	
	Private _Type_Mouvement As EntityRef(Of Type_Mouvement)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_MvtChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_MvtChanged()
    End Sub
    Partial Private Sub Oncode_dossierChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_dossierChanged()
    End Sub
    Partial Private Sub OnmatriculeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmatriculeChanged()
    End Sub
    Partial Private Sub OnDate_entreeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDate_entreeChanged()
    End Sub
    Partial Private Sub OnDate_SortieChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDate_SortieChanged()
    End Sub
    Partial Private Sub Oncode_type_mvtChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_type_mvtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Dossier = CType(Nothing, EntityRef(Of Dossier))
		Me._Utilisateur = CType(Nothing, EntityRef(Of Utilisateur))
		Me._Type_Mouvement = CType(Nothing, EntityRef(Of Type_Mouvement))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_Mvt", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Code_Mvt() As Integer
		Get
			Return Me._Code_Mvt
		End Get
		Set
			If ((Me._Code_Mvt = value)  _
						= false) Then
				Me.OnCode_MvtChanging(value)
				Me.SendPropertyChanging
				Me._Code_Mvt = value
				Me.SendPropertyChanged("Code_Mvt")
				Me.OnCode_MvtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_dossier", DbType:="Int")>  _
	Public Property code_dossier() As System.Nullable(Of Integer)
		Get
			Return Me._code_dossier
		End Get
		Set
			If (Me._code_dossier.Equals(value) = false) Then
				If Me._Dossier.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncode_dossierChanging(value)
				Me.SendPropertyChanging
				Me._code_dossier = value
				Me.SendPropertyChanged("code_dossier")
				Me.Oncode_dossierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_matricule", DbType:="Int")>  _
	Public Property matricule() As System.Nullable(Of Integer)
		Get
			Return Me._matricule
		End Get
		Set
			If (Me._matricule.Equals(value) = false) Then
				If Me._Utilisateur.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmatriculeChanging(value)
				Me.SendPropertyChanging
				Me._matricule = value
				Me.SendPropertyChanged("matricule")
				Me.OnmatriculeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_entree", DbType:="DateTime")>  _
	Public Property Date_entree() As System.Nullable(Of Date)
		Get
			Return Me._Date_entree
		End Get
		Set
			If (Me._Date_entree.Equals(value) = false) Then
				Me.OnDate_entreeChanging(value)
				Me.SendPropertyChanging
				Me._Date_entree = value
				Me.SendPropertyChanged("Date_entree")
				Me.OnDate_entreeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_Sortie", DbType:="DateTime")>  _
	Public Property Date_Sortie() As System.Nullable(Of Date)
		Get
			Return Me._Date_Sortie
		End Get
		Set
			If (Me._Date_Sortie.Equals(value) = false) Then
				Me.OnDate_SortieChanging(value)
				Me.SendPropertyChanging
				Me._Date_Sortie = value
				Me.SendPropertyChanged("Date_Sortie")
				Me.OnDate_SortieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_type_mvt", DbType:="Int")>  _
	Public Property code_type_mvt() As System.Nullable(Of Integer)
		Get
			Return Me._code_type_mvt
		End Get
		Set
			If (Me._code_type_mvt.Equals(value) = false) Then
				If Me._Type_Mouvement.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncode_type_mvtChanging(value)
				Me.SendPropertyChanging
				Me._code_type_mvt = value
				Me.SendPropertyChanged("code_type_mvt")
				Me.Oncode_type_mvtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Dossier_Mvt_Dossier", Storage:="_Dossier", ThisKey:="code_dossier", OtherKey:="Code_Dossier", IsForeignKey:=true)>  _
	Public Property Dossier() As Dossier
		Get
			Return Me._Dossier.Entity
		End Get
		Set
			Dim previousValue As Dossier = Me._Dossier.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Dossier.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Dossier.Entity = Nothing
					previousValue.Mvt_Dossier.Remove(Me)
				End If
				Me._Dossier.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mvt_Dossier.Add(Me)
					Me._code_dossier = value.Code_Dossier
				Else
					Me._code_dossier = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Dossier")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Utilisateur_Mvt_Dossier", Storage:="_Utilisateur", ThisKey:="matricule", OtherKey:="Matricule", IsForeignKey:=true)>  _
	Public Property Utilisateur() As Utilisateur
		Get
			Return Me._Utilisateur.Entity
		End Get
		Set
			Dim previousValue As Utilisateur = Me._Utilisateur.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Utilisateur.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Utilisateur.Entity = Nothing
					previousValue.Mvt_Dossier.Remove(Me)
				End If
				Me._Utilisateur.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mvt_Dossier.Add(Me)
					Me._matricule = value.Matricule
				Else
					Me._matricule = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Utilisateur")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Type_Mouvement_Mvt_Dossier", Storage:="_Type_Mouvement", ThisKey:="code_type_mvt", OtherKey:="Code_type", IsForeignKey:=true)>  _
	Public Property Type_Mouvement() As Type_Mouvement
		Get
			Return Me._Type_Mouvement.Entity
		End Get
		Set
			Dim previousValue As Type_Mouvement = Me._Type_Mouvement.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Type_Mouvement.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Type_Mouvement.Entity = Nothing
					previousValue.Mvt_Dossier.Remove(Me)
				End If
				Me._Type_Mouvement.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mvt_Dossier.Add(Me)
					Me._code_type_mvt = value.Code_type
				Else
					Me._code_type_mvt = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Type_Mouvement")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Roles")>  _
Partial Public Class Roles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_Role As Integer
	
	Private _Lib_Role As String
	
	Private _Utilisateur As EntitySet(Of Utilisateur)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_RoleChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_RoleChanged()
    End Sub
    Partial Private Sub OnLib_RoleChanging(value As String)
    End Sub
    Partial Private Sub OnLib_RoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Utilisateur = New EntitySet(Of Utilisateur)(AddressOf Me.attach_Utilisateur, AddressOf Me.detach_Utilisateur)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_Role", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Code_Role() As Integer
		Get
			Return Me._Code_Role
		End Get
		Set
			If ((Me._Code_Role = value)  _
						= false) Then
				Me.OnCode_RoleChanging(value)
				Me.SendPropertyChanging
				Me._Code_Role = value
				Me.SendPropertyChanged("Code_Role")
				Me.OnCode_RoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lib_Role", DbType:="VarChar(20)")>  _
	Public Property Lib_Role() As String
		Get
			Return Me._Lib_Role
		End Get
		Set
			If (String.Equals(Me._Lib_Role, value) = false) Then
				Me.OnLib_RoleChanging(value)
				Me.SendPropertyChanging
				Me._Lib_Role = value
				Me.SendPropertyChanged("Lib_Role")
				Me.OnLib_RoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Roles_Utilisateur", Storage:="_Utilisateur", ThisKey:="Code_Role", OtherKey:="code_role")>  _
	Public Property Utilisateur() As EntitySet(Of Utilisateur)
		Get
			Return Me._Utilisateur
		End Get
		Set
			Me._Utilisateur.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Utilisateur(ByVal entity As Utilisateur)
		Me.SendPropertyChanging
		entity.Roles = Me
	End Sub
	
	Private Sub detach_Utilisateur(ByVal entity As Utilisateur)
		Me.SendPropertyChanging
		entity.Roles = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Salle")>  _
Partial Public Class Salle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_Salle As Integer
	
	Private _Lib_salle As String
	
	Private _Capacite As System.Nullable(Of Integer)
	
	Private _Archiveur As EntitySet(Of Archiveur)
	
	Private _Emplacement As EntitySet(Of Emplacement)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_SalleChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_SalleChanged()
    End Sub
    Partial Private Sub OnLib_salleChanging(value As String)
    End Sub
    Partial Private Sub OnLib_salleChanged()
    End Sub
    Partial Private Sub OnCapaciteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCapaciteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archiveur = New EntitySet(Of Archiveur)(AddressOf Me.attach_Archiveur, AddressOf Me.detach_Archiveur)
		Me._Emplacement = New EntitySet(Of Emplacement)(AddressOf Me.attach_Emplacement, AddressOf Me.detach_Emplacement)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_Salle", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Code_Salle() As Integer
		Get
			Return Me._Code_Salle
		End Get
		Set
			If ((Me._Code_Salle = value)  _
						= false) Then
				Me.OnCode_SalleChanging(value)
				Me.SendPropertyChanging
				Me._Code_Salle = value
				Me.SendPropertyChanged("Code_Salle")
				Me.OnCode_SalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lib_salle", DbType:="NVarChar(50)")>  _
	Public Property Lib_salle() As String
		Get
			Return Me._Lib_salle
		End Get
		Set
			If (String.Equals(Me._Lib_salle, value) = false) Then
				Me.OnLib_salleChanging(value)
				Me.SendPropertyChanging
				Me._Lib_salle = value
				Me.SendPropertyChanged("Lib_salle")
				Me.OnLib_salleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Capacite", DbType:="Int")>  _
	Public Property Capacite() As System.Nullable(Of Integer)
		Get
			Return Me._Capacite
		End Get
		Set
			If (Me._Capacite.Equals(value) = false) Then
				Me.OnCapaciteChanging(value)
				Me.SendPropertyChanging
				Me._Capacite = value
				Me.SendPropertyChanged("Capacite")
				Me.OnCapaciteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Salle_Archiveur", Storage:="_Archiveur", ThisKey:="Code_Salle", OtherKey:="code_salle")>  _
	Public Property Archiveur() As EntitySet(Of Archiveur)
		Get
			Return Me._Archiveur
		End Get
		Set
			Me._Archiveur.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Salle_Emplacement", Storage:="_Emplacement", ThisKey:="Code_Salle", OtherKey:="code_salle")>  _
	Public Property Emplacement() As EntitySet(Of Emplacement)
		Get
			Return Me._Emplacement
		End Get
		Set
			Me._Emplacement.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Archiveur(ByVal entity As Archiveur)
		Me.SendPropertyChanging
		entity.Salle = Me
	End Sub
	
	Private Sub detach_Archiveur(ByVal entity As Archiveur)
		Me.SendPropertyChanging
		entity.Salle = Nothing
	End Sub
	
	Private Sub attach_Emplacement(ByVal entity As Emplacement)
		Me.SendPropertyChanging
		entity.Salle = Me
	End Sub
	
	Private Sub detach_Emplacement(ByVal entity As Emplacement)
		Me.SendPropertyChanging
		entity.Salle = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Service")>  _
Partial Public Class Service
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_Service As Integer
	
	Private _Nom_Service As String
	
	Private _Masque_Saisi As System.Nullable(Of Integer)
	
	Private _Dossier As EntitySet(Of Dossier)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_ServiceChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_ServiceChanged()
    End Sub
    Partial Private Sub OnNom_ServiceChanging(value As String)
    End Sub
    Partial Private Sub OnNom_ServiceChanged()
    End Sub
    Partial Private Sub OnMasque_SaisiChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMasque_SaisiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Dossier = New EntitySet(Of Dossier)(AddressOf Me.attach_Dossier, AddressOf Me.detach_Dossier)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_Service", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Code_Service() As Integer
		Get
			Return Me._Code_Service
		End Get
		Set
			If ((Me._Code_Service = value)  _
						= false) Then
				Me.OnCode_ServiceChanging(value)
				Me.SendPropertyChanging
				Me._Code_Service = value
				Me.SendPropertyChanged("Code_Service")
				Me.OnCode_ServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom_Service", DbType:="VarChar(20)")>  _
	Public Property Nom_Service() As String
		Get
			Return Me._Nom_Service
		End Get
		Set
			If (String.Equals(Me._Nom_Service, value) = false) Then
				Me.OnNom_ServiceChanging(value)
				Me.SendPropertyChanging
				Me._Nom_Service = value
				Me.SendPropertyChanged("Nom_Service")
				Me.OnNom_ServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Masque_Saisi", DbType:="Int")>  _
	Public Property Masque_Saisi() As System.Nullable(Of Integer)
		Get
			Return Me._Masque_Saisi
		End Get
		Set
			If (Me._Masque_Saisi.Equals(value) = false) Then
				Me.OnMasque_SaisiChanging(value)
				Me.SendPropertyChanging
				Me._Masque_Saisi = value
				Me.SendPropertyChanged("Masque_Saisi")
				Me.OnMasque_SaisiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Service_Dossier", Storage:="_Dossier", ThisKey:="Code_Service", OtherKey:="code_service")>  _
	Public Property Dossier() As EntitySet(Of Dossier)
		Get
			Return Me._Dossier
		End Get
		Set
			Me._Dossier.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Dossier(ByVal entity As Dossier)
		Me.SendPropertyChanging
		entity.Service = Me
	End Sub
	
	Private Sub detach_Dossier(ByVal entity As Dossier)
		Me.SendPropertyChanging
		entity.Service = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Type_Mouvement")>  _
Partial Public Class Type_Mouvement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Code_type As Integer
	
	Private _Lib_Type As String
	
	Private _Mvt_Dossier As EntitySet(Of Mvt_Dossier)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCode_typeChanging(value As Integer)
    End Sub
    Partial Private Sub OnCode_typeChanged()
    End Sub
    Partial Private Sub OnLib_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnLib_TypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mvt_Dossier = New EntitySet(Of Mvt_Dossier)(AddressOf Me.attach_Mvt_Dossier, AddressOf Me.detach_Mvt_Dossier)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code_type", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Code_type() As Integer
		Get
			Return Me._Code_type
		End Get
		Set
			If ((Me._Code_type = value)  _
						= false) Then
				Me.OnCode_typeChanging(value)
				Me.SendPropertyChanging
				Me._Code_type = value
				Me.SendPropertyChanged("Code_type")
				Me.OnCode_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lib_Type", DbType:="NVarChar(50)")>  _
	Public Property Lib_Type() As String
		Get
			Return Me._Lib_Type
		End Get
		Set
			If (String.Equals(Me._Lib_Type, value) = false) Then
				Me.OnLib_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Lib_Type = value
				Me.SendPropertyChanged("Lib_Type")
				Me.OnLib_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Type_Mouvement_Mvt_Dossier", Storage:="_Mvt_Dossier", ThisKey:="Code_type", OtherKey:="code_type_mvt")>  _
	Public Property Mvt_Dossier() As EntitySet(Of Mvt_Dossier)
		Get
			Return Me._Mvt_Dossier
		End Get
		Set
			Me._Mvt_Dossier.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Mvt_Dossier(ByVal entity As Mvt_Dossier)
		Me.SendPropertyChanging
		entity.Type_Mouvement = Me
	End Sub
	
	Private Sub detach_Mvt_Dossier(ByVal entity As Mvt_Dossier)
		Me.SendPropertyChanging
		entity.Type_Mouvement = Nothing
	End Sub
End Class
